import React, { useState, useEffect } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import { Container, Row, Col, Form, Button, Spinner } from 'react-bootstrap';
import { GoogleGenerativeAI } from "@google/generative-ai";
import './App.css'; // Assuming you have some custom styles
import { YoutubeTranscript } from 'youtube-transcript';

export default function App() {
  // Variables for the URL, timestamps, and error handling. 
  const [videoUrl, setVideoUrl] = useState('https://www.youtube.com/embed/xNRJwmlRBNU?si=ptewSZO2p0Mjs45V');
  const [videoId, setVideoId] = useState('xNRJwmlRBNU');
  const [timestamps, setTimestamps] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  // Effect to set the initial video URL and ID
  const handleSubmit = (e) => {
    e.preventDefault();
    const inputUrl = e.target.elements.videoInput.value;
    // Convert YouTube URL to embed URL
    if (inputUrl) {
      // Handle different YouTube URL formats
      let extractedVideoId = '';
      if (inputUrl.includes('youtube.com/watch?v=')) {
        extractedVideoId = new URL(inputUrl).searchParams.get('v');
      } else if (inputUrl.includes('youtu.be/')) {
        extractedVideoId = inputUrl.split('youtu.be/')[1].split('?')[0];
      }
      
      if (extractedVideoId) {
        setVideoUrl(`https://www.youtube.com/embed/${extractedVideoId}`);
        setVideoId(extractedVideoId);
        setTimestamps([]); // Clear previous timestamps
      }
    }
  };

  // Function to generate timestamps using Google Generative AI
  const generateTimestamps = async () => {
    setLoading(true);
    setError('');
    
    try {
      const apiKey = import.meta.env.VITE_API_KEY;
      const genAI = new GoogleGenerativeAI(apiKey);
      const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
      
      // First fetch the transcript
      let transcript = [];
      let transcriptText = '';
      try {
        transcript = await YoutubeTranscript.fetchTranscript(videoId);
        transcriptText = transcript.map(t => t.text).join(' ');
      } catch (transcriptError) {
        console.error('Transcript fetch error:', transcriptError);
        // Continue with empty transcript - Gemini will still try to analyze the video
      }

      // Now send both the video URL and transcript to Gemini
      const prompt = `Here is a video transcript:\n${transcriptText}\n\nPlease generate timestamps of key topics of the video from start to finish, in the format 00:00 - Title. Be very precise with the timestamps.`;
      const result = await model.generateContent([
        prompt,
        {
          fileData: {
            fileUri: `https://www.youtube.com/watch?v=${videoId}`,
          },
        }
      ]);

      const text = result.response.text();
      // Filter lines that potentially contain a timestamp in "MM:SS - Title" or "HH:MM:SS - Title" format
      const timestampLines = text.split('\n').filter(line => line.match(/^\s*\d{1,2}:\d{2}(?::\d{2})?\s*-\s*.+/));

      const processedTimestamps = timestampLines.map(line => {
        // Regex to capture time (MM:SS or HH:MM:SS) and title
        const match = line.match(/^\s*(\d{1,2}:\d{2}(?::\d{2})?)\s*-\s*(.+)$/);
        
        if (match) {
          const timeStr = match[1]; // e.g., "01:23" or "00:01:23"
          // const title = match[2].trim(); // Title part, if needed separately
          
          const timeParts = timeStr.split(':');
          let totalSeconds = 0;

          if (timeParts.length === 2) { // MM:SS format
            totalSeconds = parseInt(timeParts[0], 10) * 60 + parseInt(timeParts[1], 10);
          } else if (timeParts.length === 3) { // HH:MM:SS format
            totalSeconds = parseInt(timeParts[0], 10) * 3600 + parseInt(timeParts[1], 10) * 60 + parseInt(timeParts[2], 10);
          } else {
            console.warn(`Unexpected time format: ${timeStr} in line: "${line}"`);
            return null; // Skip this timestamp if time format is unparseable
          }
          
          if (isNaN(totalSeconds) || totalSeconds < 0) {
            console.warn(`Parsed NaN or negative seconds for time: ${timeStr} in line: "${line}"`);
            return null; // Skip if seconds are invalid
          }

          const youtubeLink = `https://www.youtube.com/watch?v=${videoId}&t=${totalSeconds}s`;
          
          return {
            displayText: line.trim(), // The full line as generated by the AI (e.g., "01:23 - Introduction")
            url: youtubeLink,
          };
        }
        console.warn(`Line did not match expected timestamp format: "${line}"`);
        return null; // Skip lines that don't match the detailed format
      }).filter(Boolean); // Remove any null entries from parsing failures

      setTimestamps(processedTimestamps);
    } catch (err) {
      setError(err.message || 'Failed to generate timestamps. Please try again later.');
      console.error('Error generating timestamps:', err);
    } finally {
      setLoading(false);
    }
  };

  // State to track elapsed seconds
  const [elapsedSeconds, setElapsedSeconds] = useState(0);

  // Effect to track time during loading
  useEffect(() => {
    let timer;
    if (loading) {
      setElapsedSeconds(0);
      timer = setInterval(() => {
        setElapsedSeconds(prev => prev + 1);
      }, 1000);
    }
    
    return () => {
      if (timer) clearInterval(timer);
    };
  }, [loading]);

  // Effect to clear the timer when a new video is loaded
  useEffect(() => {
    setElapsedSeconds(0);
  }, [videoId]);

  return (
    <>
    <h1 className="title">Multimodal video analysis tool</h1>
    <div className="d-flex justify-content-center align-items-center min-vh-100">
      <Container className="mt-4 text-center" fluid>
        <Row className="justify-content-center">
          <Col md={8} className="mb-4 d-flex justify-content-center">
            <Form onSubmit={handleSubmit} className="d-flex flex-column align-items-center w-100">
              <Form.Group className="mb-3 w-100">
                <Form.Label className="subtitle">Enter YouTube Video URL</Form.Label>
                <Form.Control
                  type="text"
                  name="videoInput"
                  placeholder="https://www.youtube.com/watch?v=..."
                  className="user-input" />
              </Form.Group>
              <Button variant="primary" type="submit" className="load-button">
                Load Video
              </Button>
            </Form>
          </Col>
        </Row>
        <Row className="embed-responsive-item">
          <Col>
            <div className='ratio ratio-16x9'>
              <iframe
                src={videoUrl}
                title="YouTube video"
                allowFullScreen
                className="embed-responsive-item"
              ></iframe>
            </div>
          </Col>
        </Row>

        <Row className="justify-content-center mt-4">
          <Col md={8}>
            <h3 className='subtitle-timestamps'>Video Timestamps</h3>
            <div className="d-flex align-items-center justify-content-center">
              <Button
                variant="success"
                onClick={generateTimestamps}
                disabled={loading}
                className="generate-button"
              >
                {loading ? (
                  <>
                    <Spinner as="span" animation="border" size="sm" role="status" aria-hidden="true" />
                    <span className="ms-2">Generating... {elapsedSeconds > 0 ? `(${elapsedSeconds}s)` : ""}</span>
                  </>
                ) : "Generate Timestamps"}
              </Button>
            </div>

            {error && <div className="alert alert-danger">{error}</div>}

            {timestamps.length > 0 ? (
              <div className="timestamps-container bg-light p-3 rounded text-start">
                <ul className="list-unstyled">
                  {timestamps.map((timestamp, index) => (
                    <li key={index} className="mb-2">
                      <a href={timestamp.url} target="_blank" rel="noopener noreferrer">
                        {timestamp.displayText}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            ) : !loading && (error === '' || error === 'Failed to generate timestamps. Please try again later.') ? (
              <div className="alert-info">No timestamps generated yet. Click the button to generate.</div>
            ) : null}
          </Col>
        </Row>
      </Container>
    </div></>
  );
}
